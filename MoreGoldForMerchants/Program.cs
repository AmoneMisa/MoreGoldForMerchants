using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;

namespace MoreGoldForMerchants
{
    public class Program
    {
        public static Lazy<Settings> _settings = null!;
        public static Settings settings => _settings.Value;
        
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var need = new HashSet<string>();
            need.Add("Blacksmith");
            need.Add("Apothecary");
            need.Add("Pawnbroker");
            need.Add("Food Vendor");
            need.Add("Spell Vendor");
            need.Add("Fletcher");
            need.Add("Tailor");
            var hashSet = new HashSet<string>();
            
            foreach (var leveledItemGetter in state.LoadOrder.PriorityOrder.LeveledItem().WinningContextOverrides())
            {
                var editorId = leveledItemGetter.Record.EditorID;

                if (editorId == null)
                {
                    continue;
                }

                if (!editorId.Contains("VendorGold"))
                {
                    continue;
                }

                var leveledItem = leveledItemGetter.GetOrAddAsOverride(state.PatchMod);

                var recordEntries = leveledItem.Entries;

                if (recordEntries == null)
                {
                    continue;
                }
                
                foreach (var leveledItemEntryGetter in recordEntries)
                {
                    var data = leveledItemEntryGetter.Data;
                    
                    if (data == null)
                    {
                        continue;
                    }
                    
                    var id = data?.Reference.TryResolve(state.LinkCache)?.EditorID;

                    if (id != "Gold001")
                    {
                        continue;
                    }

                    data!.Count = (short) settings.AmountGold;
                }
            }
        }
    }
}
